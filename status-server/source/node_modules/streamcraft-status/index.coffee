async= require 'async'
fs= require 'fs'
mcquery= require 'mcquery'

class Status
    @intervalID: {}



    @check: (servers, done) ->

        id=0

        # итерация по каждому серверу в массиве
        async.map servers
        ,   (server, cb) ->
            status= {}

            status=
                title: server.title
                host: server.host
                port: server.port
                id: server.id

            id++

            query= new mcquery server.host, server.port

            # cоединяемся
            query.connect (err) ->
                if err
                    do query.close
                    status.error= err.error
                    return cb null, status
                # если соединилсь успешно, берем статистику
                query.basic_stat (err, stat) ->
                    do query.close

                    if err
                        status.error= err.error
                    else
                        status.stat=
                            numplayers: stat.numplayers
                            maxplayers: stat.maxplayers

                    return cb null, status

        ,   (err, result) ->
                done result



    @start: (config, cb, sec) ->
        @intervalID= setInterval(
            =>
                @check config, cb
        ,
            sec * 1000)

        return @intervalID



    @stop: ->
        clearInterval @intervalID



    @isWorking: ->
        if @intervalID._onTimeout instanceof Function
            return true
        else
            return false



module.exports= Status

